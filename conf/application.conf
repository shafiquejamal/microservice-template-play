akka {
}

play.crypto.secret=${?NAME_OF_SERVICE_PLAY_CRYPTO_SECRET}

play.modules {
}

play.i18n {
  langs = [ "en" ]
}

play.http {

  session {
  }

  flash {
  }
}

play.server.netty {
}

play.ws {
  ssl {
  }
}

play.cache {
}

play.filters {
  cors {
  }
  csrf {
  }
  headers {
  }

  hosts {
  }
}

play.evolutions {
}

play.db {
  prototype {
  }
}

db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  default.driver=org.postgresql.Driver
  default.url=${?NAME_OF_SERVICE_DEFAULT_DB_DRIVER}
  default.username=${?NAME_OF_SERVICE_DEFAULT_DB_USERNAME}
  default.password=${?NAME_OF_SERVICE_DEFAULT_DB_PASSWORD}
  default.poolInitialSize=10
  default.poolMaxSize=20
  default.connectionTimeoutMillis=1000
  default.poolValidationQuery="select 1 as one"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  default.logSql=true

  test.driver=org.postgresql.Driver
  test.url=${?NAME_OF_SERVICE_TEST_DB_DRIVER}
  test.username=${?NAME_OF_SERVICE_TEST_DB_USERNAME}
  test.password=${?NAME_OF_SERVICE_TEST_DB_PASSWORD}
  test.poolInitialSize=10
  test.poolMaxSize=20
  test.connectionTimeoutMillis=1000
  test.poolValidationQuery="select 1 as one"

  test.logSql=true
}

scalikejdbc.global.loggingSQLAndTime.enabled=true
scalikejdbc.global.loggingSQLAndTime.logLevel=info
scalikejdbc.global.loggingSQLAndTime.warningEnabled=true
scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis=1000
scalikejdbc.global.loggingSQLAndTime.warningLogLevel=warn
scalikejdbc.global.loggingSQLAndTime.singleLineMode=false
scalikejdbc.global.loggingSQLAndTime.printUnprocessedStackTrace=false
scalikejdbc.global.loggingSQLAndTime.stackTraceDepth=0
logger.scalikejdbc=info

eigenrouteAuthenticatedAction.publicKey.X=${?NAME_OF_SERVICE_X}
eigenrouteAuthenticatedAction.publicKey.Y=${?NAME_OF_SERVICE_Y}
eigenrouteAuthenticatedAction.privateKey.S=${?NAME_OF_SERVICE_S}

op-rabbit {
  topic-exchange-name = ${?NAME_OF_SERVICE_RABBITMQ_EXCHANGE}
  channel-dispatcher = "op-rabbit.default-channel-dispatcher"
  default-channel-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher

    # What kind of ExecutionService to use
    executor = "fork-join-executor"

    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2

      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 4
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }
  connection {
    virtual-host = ${?NAME_OF_SERVICE_RABBITMQ_VHOST}
    hosts = [${?NAME_OF_SERVICE_RABBITMQ_HOST1}]
    host = ${?NAME_OF_SERVICE_RABBITMQ_HOST1}
    username = ${?NAME_OF_SERVICE_RABBITMQ_USERNAME}
    password = ${?NAME_OF_SERVICE_RABBITMQ_PASSWORD}
    port = ${?NAME_OF_SERVICE_RABBITMQ_PORT}
    ssl = true
    connection-timeout = 3s
  }
}

play.modules.enabled += "org.flywaydb.play.PlayModule"
db.default.migration.initOnMigrate=true
db.default.migration.auto=true